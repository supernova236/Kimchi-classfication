# -*- coding: utf-8 -*-
"""kimchi_CNN_K_fold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MnrA9G11hU0g8jplCT8h2qzlbdxyw277

# pytorch CNN image classification
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

import os

# Navigate to the directory where my dataset is located
dataset_path = '/content/drive/MyDrive/kimchi_classification/dataset'

os.chdir(dataset_path)



# %pwd

import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import StratifiedKFold
from torch.utils.data import ConcatDataset, DataLoader, Subset
from torchvision import datasets, transforms
from itertools import chain
from tqdm import tqdm

device = 'cuda' if torch.cuda.is_available() else 'cpu'

torch.manual_seed(100)

if device == 'cuda':
    torch.cuda.manual_seed_all(100)

learning_rate = 0.001
training_epochs = 15
batch_size = 35
num_workers = 2
num_folds = 5

transform = transforms.ToTensor()


# Load the train, valid, test dataset in KIMCHI dataset
kimch_train = datasets.ImageFolder(root=os.path.join(dataset_path, 'train'), transform=transform)
kimch_valid = datasets.ImageFolder(root=os.path.join(dataset_path, 'val'), transform=transform)
kimch_test = datasets.ImageFolder(root=os.path.join(dataset_path, 'test'), transform=transform)

#Combine train and validation sets for do K-Fold cross-valdation
combined_dataset = torch.utils.data.ConcatDataset([kimch_train, kimch_valid])

all_targets = list(chain(*[ds.targets for ds in combined_dataset.datasets]))

# Initialize Stratified K-Fold
stratified_kfold = StratifiedKFold(n_splits = num_folds, shuffle=True, random_state=30)

class kimchi_CNN(torch.nn.Module):

    def __init__(self, num_classes):
        super(kimchi_CNN, self).__init__()

        # First Layer
        # Input image size = 64 x 64 x 3
        # number of kennels = 8
        # Outputsize = 32 x 32 x 16

        self.layer1 = torch.nn.Sequential(
            torch.nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2),
            torch.nn.Dropout(p=0.25))

        # Second Layer
        # Input image size = 32 x 32 x 16
        # number of kennels = 32
        # Outputsize = 16 x 16 x 32


        self.layer2 = torch.nn.Sequential(
            torch.nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2))

        # Third Layer
        # Input image size = 16 x 16 x 32
        # number of kennels = 64
        # Outputsize = 8 x 8 x 64

        self.layer3 = torch.nn.Sequential(
            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2),
            torch.nn.Dropout(p=0.25))


        # Fourth Layer
        # Input image size = 8 x 8 x 64
        # number of kennels = 64
        # Outputsize = 5 x 5 x 128

        self.layer4 = torch.nn.Sequential(
            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))

        # Fifth Layer
        # Drop out

        self.fc1 = torch.nn.Linear(5 * 5 * 128, 800, bias=True)
        torch.nn.init.xavier_uniform_(self.fc1.weight)
        self.layer5 = torch.nn.Sequential(
            self.fc1,
            torch.nn.ReLU(),
            torch.nn.Dropout(p=0.5))

        # Fully connected layer 11 outputs
        self.fc2 = torch.nn.Linear(800, num_classes, bias=True)
        torch.nn.init.xavier_uniform_(self.fc2.weight)


    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = out.view(out.size(0), -1)
        out = self.layer5(out)
        out = self.fc2(out)
        return out

model = kimchi_CNN(num_classes = 11).to(device)

criterion = torch.nn.CrossEntropyLoss().to(device)
# Cross entropy loss
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
#learning_Rate = 0.001

# Training and validation session


all_train_accuracies = []
all_val_accuracies = []


for epoch in range(training_epochs):
    #training_epochs = 15

    fold_train_accuracies = []
    fold_val_accuracies = []
    fold_avg_costs_train = []
    fold_avg_costs_val = []


    for fold, (train_num, val_num) in enumerate(tqdm(stratified_kfold.split(combined_dataset, all_targets), desc=f"Epoch {epoch+1}/{training_epochs}")):
        # Train and validation folds for dataset
        train_set = Subset(combined_dataset, train_num)
        val_set = Subset(combined_dataset, val_num)

        train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)
        val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)



        avg_cost_train = 0
        total_correct_train = 0
        total_samples_train = 0

        total_batch = len(train_loader)

        for images, labels in tqdm(train_loader, desc=f"Fold {fold+1}/{num_folds} Training"):
            # images is min-batch
            # labels
            X = images.to(device)
            Y = labels.to(device)

            optimizer.zero_grad()
            hypothesis = model(X)
            cost = criterion(hypothesis, Y)
            cost.backward()
            optimizer.step()

            avg_cost_train += cost / total_batch

            _, predicted = torch.max(hypothesis.data, 1)
            total_samples_train += labels.size(0)

            predicted = predicted.to(labels.device)
            total_correct_train += (predicted == labels).sum().item()


        fold_train_accuracy = total_correct_train / total_samples_train
        fold_train_accuracies.append(fold_train_accuracy)
        fold_avg_costs_train.append(avg_cost_train)


        model.eval()  # Set the model to evaluation mode
        avg_cost_val = 0
        total_correct_val = 0
        total_samples_val = 0

        with torch.no_grad():
            for val_images, val_labels in tqdm(val_loader, desc=f"Fold {fold+1}/{num_folds} Validation"):
                X_val = val_images.to(device)
                Y_val = val_labels.to(device)

                val_hypothesis = model(X_val)
                val_cost = criterion(val_hypothesis, Y_val)

                avg_cost_val += val_cost / len(val_loader)

                # Calculate validation accuracy
                _, val_predicted = torch.max(val_hypothesis.data, 1)
                total_samples_val += val_labels.size(0)

                val_predicted = val_predicted.to(val_labels.device)
                total_correct_val += (val_predicted == val_labels).sum().item()

            fold_val_accuracy = total_correct_val / total_samples_val
            fold_val_accuracies.append(fold_val_accuracy)
            fold_avg_costs_val.append(avg_cost_val)

    # Calculate mean accuracy and costs
    m_accuracy_train = sum(fold_train_accuracies) / num_folds
    m_cost_train = sum(fold_avg_costs_train) / num_folds

    all_train_accuracies.append(m_accuracy_train)
    # Calculate validation accuracy
    m_accuracy_val = sum(fold_val_accuracies) / num_folds
    m_cost_val = sum(fold_avg_costs_val) / num_folds

    all_val_accuracies.append(m_accuracy_val)


    print(f'[Epoch: {epoch + 1:>4}], Train Loss: {m_cost_train:.6f}, Train Accuracy: {m_accuracy_train:.2%}, Val Loss: {m_cost_val:.6f}, Val Accuracy: {m_accuracy_val:.2%}')

plt.plot(range(1, training_epochs + 1), all_train_accuracies, label='Training Accuracy', marker='o')
plt.plot(range(1, training_epochs + 1), all_val_accuracies, label='Validation Accuracy', marker='o')

plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title(f'Training and Validation Accuracy Over Epochs')

# Adding a legend
plt.legend()

# Display the plot
plt.show()

# # Test session
test_loader = DataLoader(kimch_test, batch_size=batch_size, shuffle=False, num_workers=2)

# Lists to store per-class accuracy
class_correct = [0] * len(kimch_test.classes)
class_total = [0] * len(kimch_test.classes)

model.eval()  # Set the model to evaluation mode
correct = 0
total = 0

with torch.no_grad():
    for test_images, test_labels in test_loader:

        X_test = test_images.to(device)
        Y_test = test_labels.to(device)
        test = model(X_test)
        _, test_predicted = torch.max(test.data, 1)
        test_predicted = test_predicted.to(test_labels.device)
        total += test_labels.size(0)
        correct += (test_predicted == test_labels).sum().item()

        # Calculate class-wise accuracy
        for i in range(len(test_labels)):
            label = test_labels[i].item()
            class_correct[label] += int(test_predicted[i] == label)
            class_total[label] += 1



avg_test_accuracy = correct / total
print(f'Test Accuracy: {100 * avg_test_accuracy:.2f}%')

# Plotting
class_names = kimch_test.classes
class_accuracies = [class_correct[i] / class_total[i] for i in range(len(class_correct))]

# Plot overall accuracy
plt.figure(figsize=(20, 5))
plt.bar(['Average'] + class_names, [avg_test_accuracy] + class_accuracies)
plt.title('Testing Accuracy')
plt.xlabel('Classes')
plt.ylabel('Accuracy')
plt.ylim(0, 1.0)
plt.show()